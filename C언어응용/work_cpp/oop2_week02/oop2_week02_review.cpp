//// 230311 토요일 오프라인 수업 리뷰
//
//#include <iostream>
//using namespace std;
//
//int main() {
//	//double* pd;
//	//// int* pi;				// 선언만은 불가
//	//
//	//double d = 5.21;
//
//	//// 포인터, 다중포인터 메모리 주소, 값 출력
//	//
//	//int i = 98;		// ★
//	//cout << "i 메모리 주소 : " << &i << endl;
//	//cout << "i 값 : " << i << endl;
//
//	//cout << endl;
//
//	//int* pi = &i;	// ★
//	//cout << "i 메모리 주소 : " << pi << endl;
//	//cout << "pi 메모리 주소 :" << &pi << endl;
//	//cout << "pi 값 : " << *pi << endl;
//
//	//cout << endl;
//
//	//int** ppi = &pi;	// ★
//	//cout << "pi 메모리 주소 : " << ppi << endl;
//	//cout << "ppi 메모리 주소 : " << &ppi << endl;
//	//cout << "ppi 값 :" << **ppi << endl;
//
//	//cout << endl;
//
//	//int*** pppi = &ppi;		// ★
//	//cout << "ppi 메모리 주소 : " << pppi << endl;
//	//cout << "pppi 메모리 주소 : " << &pppi << endl;
//	//cout << "pppi 값 : " << ***pppi << endl;
//
//	//cout << endl;
//
//	//// ===================================================================
//
//	///* 
//	//▶ void 포인터 사용
//	//1) void 포인터에는 메모리 주소값을 저장해야한다. 
//	//  (ex. vDP = dNum X /// vDP = &dNum O)
//	// 
//	//2) void 포인터 사용 시점에는 어떤 타입인지 명시해줘야 한다.
//	//3) 포인터의 크기는 8바이트이다.
//	//*/
//
//	//int iNum = 521;
//	//void* vIP;
//	//vIP = &iNum;
//	//
//	//cout << "vIP 메모리 주소 : " << vIP << endl;
//	//cout << "vIP 값 : " << *(int*)vIP << endl;
//	//cout << "vIP 메모리 크기 : " <<  sizeof(vIP) << endl;
//	//cout << "iNum 메모리 크기 : " << sizeof(iNum) << endl;
//
//	//cout << endl;
//
//	//// ------------------------------------------------------------------
//
//	//double dNum = 5.21;
//	//void* vDP;
//
//	//vDP = &dNum;
//
//	//cout << "vDP 메모리 주소 : " << vDP << endl;
//	//cout << "vDP 값 : " << *(double*)vDP << endl;
//	//cout << "vDP 메모리 크기 : " << sizeof(vDP) << endl;
//	//cout << "dNum 메모리 크기 : " << sizeof(dNum) << endl;
//
//	// ===================================================================
//
//	///*
//	//▶  포인터 & const 콜라보
//
//	//(* const : 상수처럼 동작 / 사이드 이펙트 발생하지 않음을 보증(값 변경 X))
//	//
//	//[1] const가 포인터 앞에 오는 경우
//	//=> 값 변경 불가능, 주소 변경 가능
//	//(ex. 교수님이 가리키는 지혜 자리에 설화가 앉을 수는 없지만, 
//	//     교수님이 히령이를 가리킬 수는 있음)
//
//	//[2] const가 포인터 뒤에 오는 경우
//	//=> 값 변경 가능, 주소 변경 불가능
//	//(ex. 교수님이 가리키는 지혜 자리에 설화가 대신 앉을 수 는 있지만,
//	//     교수님이 히령이를 가리킬 수 없음)
//
//	//[3] const가 포인터 앞, 뒤에 오는 경우
//	//=> 값 변경 불가능, 주소 변경 불가능
//	//(ex. 교수님이 가리키는 지혜 자리에 설화가 대신 앉을 수 없고,
//	//     교수님이 히령이를 가리킬 수도 없음)
//	//*/
//
//	//// ------------------------------------------------------------------ 
//	//
//	//// [1] const 가 포인터 앞에 오는 경우
//	//// - 값 변경 X /// 주소 변경 O
//	//
//	//const double* cDP;	// ★★★
//
//	//double dNum2 = 5.21;
//	//
//	//cDP = &dNum2;
//
//	//cout << "dNum2 메모리 주소 : " << &dNum2 << endl;
//	//cout << "cDP 메모리 주소 : " << cDP << endl;
//	//cout << "cDP 값 : " << *cDP << endl;
//
//	//cout << endl;
//
//	//// cDP = 98;
//	//// 값 변경 불가능 ★
//	//
//	//double dNum3 = 98;
//
// //	cDP = &dNum3;
//
//	//cout << "dNum3 메모리 주소 : " << &dNum3 << endl;
//	//cout << "변경 cDP 메모리 주소 : " << cDP << endl;
//	//cout << "변경 cDP 값 : " << *cDP << endl;
//
//	//cout << endl;
//	//
//	//// ------------------------------------------------------------------ 
//
//	//// [2] const 가 포인터 뒤에 오는 경우
//	//// - 값 변경 O /// 주소 변경 X
//	//// + 포인터 상수 선언 시에는 이니셜라이저(초기화 값 지정) 필요
//
//	//int iNum2 = 980521;
//
//	//int* const IPC = &iNum2;
//
//	//cout << "iNum2 메모리 주소 : " << &iNum2 << endl;
//	//cout << "IPC 메모리 주소 : " << IPC << endl;
//	//cout << "IPC 값 : " << *IPC << endl;
//
//	//cout << endl;
//
//	//*IPC = 3415;
//
//	//cout << "변경 IPC 메모리 주소 : " << IPC << endl;
//	//cout << "변경 IPC 값 : " << *IPC << endl;
//
//	//int iNum3 = 3415;
//
//	//// IPC = &iNum3;	
//	//// 주소 변경 불가능 ★
//
//	//// ------------------------------------------------------------------
//
//	//// [3] const 가 포인터 앞, 뒤에 오는 경우
//	//// - 값 변경 X /// 주소 변경 X
//
//	//short sNum = 6;
//
//	//const short* const SPC = &sNum;
//
//	//short sNum2 = 66; 
//
//	//// SPC = 5;
//	//// 값 변경 불가능 ★
//	//// SPC = &sNum2;
//	//// 주소 변경 불가능 ★
//
//
//
//
//}
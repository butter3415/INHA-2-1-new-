//#include <iostream>
//using namespace std;
//
//
//int main() {
//	//int arr[5];
//	//int* parr = &arr[2];
//
//	//cout << parr << endl;		// 0000001FD7CFF9C0
//	//cout << parr + 1 << endl;	// 0000001FD7CFF9C4	 // 9라인 기준 + 4바이트 증가 (int) 
//	//cout << parr + 2 << endl;	// 0000001FD7CFF9C8  // 9라인 기준 + 8바이트 증가 (int) 
//
//	//---------------------------------------------------------------------------------------
//
//	//short arr[5];
//	//short* parr = &arr[2];
//
//	//cout << parr << endl;		// 00000080C09FFBFC
//	//cout << parr + 1 << endl;	// 00000080C09FFBFE	 // 16라인 기준 + 2바이트 증가 (short)
//	//cout << parr + 2 << endl;	// 00000080C09FFC00  // 16라인 기준 + 4바이트 증가 (short)
//	//cout << parr - 2 << endl;	// 00000080C09FFBF8  // 16라인 기준 - 4바이트 감소 (short)
//
//	//---------------------------------------------------------------------------------------
//
//	// 포인터 변수, 배열 선언
//
//	//short arr[5];
//	//short* p1 = &arr[1];
//	//short* p2 = &arr[4];
//	//
//	//cout << p1 << endl;		// 00000039784FFBFA
//	//cout << p2 << endl;		// 00000039784FFC00
//	//cout << p2 - p1 << endl;	// 3 -> 원소의 차가 나옴 (모든 타입에서 동일)
//
//	//---------------------------------------------------------------------------------------
//
//	//int arr[5];
//	//int* p1 = &arr[1];
//	//int* p2 = &arr[4];
//
//	//cout << p1 << endl;		// 000000DF136FF4EC
//	//cout << p2 << endl;		// 000000DF136FF4F8	// + 12바이트 증가
//	//cout << p2 - p1 << endl;	// 3 -> 원소의 차가 나옴 (모든 타입에서 동일)
//
//	// 타입의 크기만큼 증가, 감소한다.
//
//	//---------------------------------------------------------------------------------------
//
//	// 배열 포인터
//	// => 양날의 검, 
//	// => 특정 메모리 번지를 제어하는건 큰 권한 but 생각보다 잘 이용하는 사람이 적음
//	// 포인터 사용은 주의해서 사용해야함. 
//	// 문법적 규칙 알아야하며, 메모리 번지에 대한 이해도가 높아야한다.
//
//	//long arry[10];
//	//long(*p)[10] = &arry;	// &arry : 배열명 앞에 & 와야한다.
//
//	//// *p [5] = 100;		// 오류남.
//	//(*p)[5] = 100;			// (*p) -> 문법이기 때문에 꼭 지켜야함.
//
//	//cout << arry[5] << endl;	// 100 출력 : 초기화 된 값 출력 확인
//	//cout << arry[3] << endl;	// 초기화 되지 않은 값은 쓰레기값 나옴
//
//	//cout << (*p)[5] << endl;	// 100 출력 : 포인터 이용하여 값 출력
//
//	//---------------------------------------------------------------------------------------
//
//	// 포인터 배열
//
//	short a, b, c = 5, d = 2;
//	short* arr[4];
//	arr[0] = &a;
//	arr[1] = &b;
//	arr[2] = &c;
//	arr[3] = &d;
//
//	cout << arr[0] << endl;
//	cout << arr[1] << endl;		// 000000E619BFF9E4
//	cout << arr[2] << endl;		// 000000E619BFFA04
//	cout << arr[3] << endl;		// 000000E619BFFA24
//
//	cout << endl;
//
//	cout << &arr[0] << endl;	// 000000D5284FFB38	// + 8바이트씩 차이
//	cout << &arr[1] << endl;	// 000000D5284FFB40	// + 8바이트씩 차이
//	cout << &arr[2] << endl;	// 000000D5284FFB48	// + 8바이트씩 차이
//	cout << &arr[3] << endl;	// 000000D5284FFB50	// + 8바이트씩 차이
//
//	cout << endl;
//
//	cout << *arr[0] << endl;
//	cout << *arr[1] << endl;
//	cout << *arr[2] << endl;
//	cout << *arr[3] << endl;
//
//	// □□□□
//	// a b c d
//	// ? ? 5 2
//	// 주소는 배정 o, 값은 모름
//
//	// arr[0] □(a의 주소) 38
//	// arr[1] □(b의 주소) 40
//	// arr[2] □(c의 주소) 48
//	// arr[3] □(d의 주소) 50
//
//	// *** 포인터는 잘못쓰면 안쓰느니만 못하다!!! ***	
//
//	return 0;
//
//}